git
all the data that git uses locally is stored in a folder called .git 
most elite programmers don't use github (just use git on local computer)
less terminal command line tool

intialize new git repo - git init

branches
- by default on master branch
- new branches for different issues
- creates a copy of root node (can be master or other branch)
- jira (issue tracker)
	- makes new branches for different issues
	- hooks let this change ur repo

git status

untracked files - git hasn't encountered before
- git add file.extension
- git add folder
- git add folder/*.txt
- git add . (for every file/folder)
changes to be committed - git knows of this file, but it's not committed to local staging area

some files that you don't want to commit to github
- logs, credentials, useless shit

to tag files that you want to ignore, create a file called .gitignore
- list paths to files to ignore (can also use regex)
- *.txt (works even in subfolders)

http://interactionprototyping.github.io/exercises/images/github/git-stages.svg

3 lvls for local computer
- workspace (just the computer)
- index (medium area between workspace and local repo where you can store before committing)
	- git add (workspace --> index)
	- "changes not staged" = file in index is diff than workspace
		- git diff tells me what exactly is diff
- local repository (stored in .git folder)
	- commits are for "milestones" in the project
	- git commit (entire index --> local repo)
		- will have to use vim
		- "i" to insert, then type title
		- ":wq" to write and then quit
		- hit enter
	- git commit -m "title" (to avoid that shit)

git log (shows all commits to local repo)

deleting off of index
- git restore --staged file (reverts it back to the previous add)
- git rm --cached file (deletes it from index)
- NEVER USE -f

branches
- git branch branchName
- head is a pointer to which branch you're currently on
- to switch branches, use "git checkout branchName"
- cannot switch if there is any "changes not staged for commit" or "changes to be committed bc then you'll lose that version

merging
- git merge branchName (this is going to make current branch updated to the branchName)
	- if the current one is ahead of the other one, there may be merge conflicts
	- merge conflict will display some >>>> <<<< stuff in file, choose one version manually then commit
		- either add desired version to index OR abort merge (git merge --abort)